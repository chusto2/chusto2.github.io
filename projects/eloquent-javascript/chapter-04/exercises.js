////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step) {
  var newArray = [];
  if (start === end || step < 0) {
    return newArray;
  } else if (step !== undefined) {
    for (let i = start; i <= end; i+=step) {
      newArray.push(i);
    }
  } else {
  for (let i = start; i <= end; i++) {
    newArray.push(i);
  }
  }
  return newArray;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  let result = [];
  if (array.length < 1) {
    return 0;
  } 
  for (let i = 0; i < array.length; i++) {
    result.push(array[i]);
  }
  var sum = result.reduce(function(sum, i) {
      return sum + i;
  });
  return sum;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  let result = [];
  if (array.length < 1) {
    return [];
  }
  for (let i = array.length - 1; i >= 0; i--) {
    result.push(array[i]);
  }
  return result;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  for (let i = 0; i <= Math.floor((array.length - 1 ) / 2); i++) {
    let a = array[i];
    array[i] = array[array.length - 1 - i];
    array[array.length - 1 - i] = a;
  }
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  let list = null;
  for (let i = array.length - 1; i >= 0; i--) {
    list = {
      value: array[i],
      rest: list
    };
  }
  
  return list;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
  let array = [];
  for(let i = list; list; list = list.rest) {
    array.push(list.value);
  }
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(ele, list) {
  var node = listToArray(list);
  node.unshift(ele);
  var value = arrayToList(node);
  return value;
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, num) {
  var result = listToArray(list);
  return result[num];
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(a, b) {
  if(a === b) {
    return true;
  }
  if(a === null || typeof a !== 'object' || b === null || typeof b !== 'object') {
    return false;
  } 
  var keysA = Object.keys(a);
  var keysB = Object.keys(b);
  if (keysA.length === 0 && keysB.length === 0) {
    return true;
  } else if (keysA === keysB) {
    return true;
  } 
  for(var key in a) {
      if (deepEqual(a[key], b[key])) {
        return true;
      } else {
        return false;
      } 
    }
  
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
